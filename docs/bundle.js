(()=>{"use strict";const t="up",e="right",i="down",s="left",n=["ArrowDown","ArrowRight","ArrowUp","ArrowLeft"],o=["NumpadAdd","Equal","BracketRight"],r=["NumpadSubtract","Minus","BracketLeft"],h=["Space","KeyP"],d=["Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Digit1","Digit2","Digit3","Digit4","Digit5"],a={1:1e3,2:750,3:500,4:250,5:100},l={size:[401,401],cellSize:20,gridColor:"#000000",bgColor:"#ffffff"},c=new class{constructor(n,o,r=500){this.speedChangeStep=25,this.isRunning=!1,this.setupCanvas(n,l.size);const h=new class{constructor(e){this.isGrowing=!1,this.direction=t,this.color="green",this.body=e}getHead(){return this.body[0]}setHead(t){this.body.unshift(t)}popTail(){return this.body.pop()}get size(){return this.body.length}turn(t){switch(t){case"Up":this.turnUp();break;case"Right":this.turnRight();break;case"Down":this.turnDown();break;case"Left":this.turnLeft();break;default:throw new Error("Wrong direction")}}turnUp(){this.direction!==i&&(this.direction=t)}turnRight(){this.direction!==s&&(this.direction=e)}turnDown(){this.direction!==t&&(this.direction=i)}turnLeft(){this.direction!==e&&(this.direction=s)}}([[10,12],[10,13]]),d=new class{constructor(t,e){const[i,s]=e.size;this.width=i,this.height=s,this.context=t,this.cellSize=e.cellSize,this.gridColor=e.gridColor,this.initBoundaries(),this.fillBackground(e.bgColor),this.drawGrid()}fillBackground(t){this.context.fillStyle=t,this.context.fillRect(0,0,this.height,this.width)}isOutOfCanvas([t,e]){const i=t<0||t>this.maxXCell,s=e<0||e>this.maxYCell;return i||s}initBoundaries(){this.maxXCell=Math.floor((this.width-this.cellSize)/this.cellSize),this.maxYCell=Math.floor((this.height-this.cellSize)/this.cellSize)}getCoordinates(t){const[e,i]=t;return[e*this.cellSize,i*this.cellSize]}clean(t){const e=this.getCoordinates(t);this.context.clearRect(...e,this.cellSize,this.cellSize)}drawCell(t,e){const i=[...this.getCoordinates(t),this.cellSize,this.cellSize];this.context.fillStyle=e,this.context.fillRect(...i)}drawFigure(t){t.body.forEach((e=>this.drawCell(e,t.color))),this.drawGrid()}drawLine(t,e){this.context.moveTo(...t),this.context.lineTo(...e)}drawGrid(){const t=Math.max(this.width,this.height);for(let e=.5;e<=t;e+=this.cellSize)this.drawLine([e,1],[e,this.height]),this.drawLine([1,e],[this.width,e]);this.context.strokeStyle=this.gridColor,this.context.stroke()}}(n.getContext("2d"),l);this.navigator=new class{constructor(t,e){this.snake=t,this.field=e}reDraw(){this.drawSnake()}drawSnake(){this.field.drawFigure(this.snake),this.field.drawGrid()}getNewFood(){let t;do{t=this.createRandomCell()}while(this.isCellUnderSnake(t));return new class{constructor(t){this.color="red",this.body=[t]}get position(){return this.body[0]}set position(t){this.body=[t]}}(t)}isCellUnderSnake(t){return this.snake.body.some((e=>this.isOnSamePosition(t,e)))}getRandomNumber(t,e){const i=Math.random()*(t-e)+e;return Math.floor(i)}createRandomCell(){return[this.getRandomNumber(0,this.field.maxXCell),this.getRandomNumber(0,this.field.maxYCell)]}putNewFoodOnField(){this.food=this.getNewFood(),this.field.drawFigure(this.food)}move(){this.moveHeadForward(),this.moveTail()}moveHeadForward(){const t=this.getNextCell(this.snake.getHead(),this.snake.direction);this.field.isOutOfCanvas(t)&&this.correctPosition(t),this.isOnSamePosition(this.food.position,t)&&(this.snake.isGrowing=!0,this.putNewFoodOnField()),this.snake.setHead(t)}moveTail(){this.snake.isGrowing||this.field.clean(this.snake.popTail()),this.snake.isGrowing=!1}correctPosition(t){const[e,i]=t;e<0?t[0]=this.field.maxXCell:e>this.field.maxXCell?t[0]=0:i<0?t[1]=this.field.maxYCell:i>this.field.maxYCell&&(t[1]=0)}isOnSamePosition(t,e){const[i,s]=t,[n,o]=e;return i===n&&s===o}getNextCell(t,e){let[i,s]=t,n=null;switch(e){case"up":n=[i,--s];break;case"right":n=[++i,s];break;case"down":n=[i,++s];break;case"left":n=[--i,s];break;default:throw new Error("wrong direction!")}return n}turn(t){this.snake.turn(t)}}(h,d),this.speed=r,this.speedView=o,this.updateSpeedView(),this.navigator.drawSnake(),this.navigator.putNewFoodOnField()}initControls(t){t.speedUp.addEventListener("click",(()=>this.speedUp())),t.speedDown.addEventListener("click",(()=>this.speedDown()))}handleKeyInput(t){const e=t.code,i=[].concat(n,d,o,r),s=[].concat(o,r);if(i.includes(e)&&t.preventDefault(),h.includes(e)&&this.toggleStartStop(),s.includes(e)&&this.tuneSpeed(e),n.includes(e)){const t=e.replace("Arrow","");this.navigator.turn(t)}if(d.includes(e)){const t=e.slice(-1);a[t]&&this.changeSpeed(a[t])}}tuneSpeed(t){o.includes(t)&&this.speedUp(),r.includes(t)&&this.speedDown()}speedUp(){const t=this.speed-this.speedChangeStep<0?0:this.speed-this.speedChangeStep;this.changeSpeed(t)}speedDown(){const t=this.speed+this.speedChangeStep;this.changeSpeed(t)}toggleStartStop(){this.isRunning?this.stop():this.start()}setupCanvas(t,e){const[i,s]=e;t.setAttribute("width",i.toString()),t.setAttribute("height",s.toString())}loop(){this.navigator.move(),this.navigator.reDraw()}start(t=this.speed){this.stop(),this.intervalID=window.setInterval((()=>this.loop()),t),this.isRunning=!0}stop(){this.intervalID&&(clearInterval(this.intervalID),this.isRunning=!1)}changeSpeed(t){this.speed=t,this.updateSpeedView(),this.start()}updateSpeedView(){const t=1e3/this.speed;this.speedView.innerText=t.toFixed(1)}}(document.getElementById("canvas"),document.querySelector(".current-speed")),u={speedUp:document.querySelector(".speed-up"),speedDown:document.querySelector(".speed-down")};c.initControls(u),document.addEventListener("keydown",(t=>c.handleKeyInput(t)))})();